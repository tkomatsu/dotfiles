function norminette() {
  platform=$(uname -m)
  if [[ "$platform" == "arm64" ]]; then
    docker run --rm --platform linux/amd64 -v $PWD:/code tkomatsu/norminette /code/$1
  else
    docker run --rm -v $PWD:/code tkomatsu/norminette /code/$1
  fi
}

function ftmerge() {
  git remote add -f libft git@github.com:tkomatsu/libft
  git merge -s ours --no-commit --allow-unrelated-histories libft/master
  git read-tree --prefix=$1 -u libft/master
  git rm .gitmodules
  git commit -m "merge libft"
}

function leakcheck() {
  while true; do res=$(leaks $@); if [ $? -ne 0 ]; then echo "$res"; break; fi; sleep 5; done
}

function ftbrowse() {
  if [ -z $1 ]; then
    list=$(goft repo list)
  else
    list=$(goft repo list -L $1)
  fi
  echo "$list" | awk '{printf "%2d%s\n", NR, " : "$1}'
  echo -ne "\nselect index\n$> "
  read index

  if [ -z $index ]; then
    return
  fi
  goft browse $(echo "$list" | awk -v idx=$index 'NR==idx{print}')
}

function ftclone () {
  if [ -z $1 ]; then
    list=$(goft repo list)
  else
    list=$(goft repo list -L $1)
  fi
  echo "$list" | awk '{printf "%2d%s\n", NR, " : "$1}'
  echo -ne "\nselect index\n$> "
  read index

  if [ -z $index ]; then
    return
  fi
  echo -ne "dir name\n$> "
  read name
  if [ -z $name ]; then
    goft repo clone $(echo "$list" | awk -v idx=$index 'NR==idx{print}')
  else
    goft repo clone $(echo "$list" | awk -v idx=$index 'NR==idx{print}') $name
  fi
}

function man() {
  env \
    LESS_TERMCAP_mb=$(printf "\e[1;33m") \
    LESS_TERMCAP_md=$(printf "\e[1;33m") \
    LESS_TERMCAP_me=$(printf "\e[0m") \
    LESS_TERMCAP_se=$(printf "\e[0m") \
    LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
    LESS_TERMCAP_ue=$(printf "\e[0m") \
    LESS_TERMCAP_us=$(printf "\e[1;32m") \
    man "$@"
}

alias l='exa -F'
alias la='exa -aa -F'
alias ll='exa -l -F -aa -h -@ -m --icons --git --time-style=long-iso --color=automatic --group-directories-first'

#alias rm='rm -i'
#alias cp='cp -i'
#alias mv='mv -i'

alias mkdir='mkdir -p'
alias d='cd ~/Documents'
alias ..='cd ..'
alias ls='ls -G'

# sudo の後のコマンドでエイリアスを有効にする
alias sudo='sudo '

alias python='python3'

alias zenn="npx zenn"

alias compose="docker compose"

function ide() {
  tmux split-window -v -p 30
  tmux split-window -h -p 66
  tmux split-window -h -p 50
}

function gocover() {
  go test -cover $1 -coverprofile=cover.out
  go tool cover -html=cover.out -o cover.html
  rm cover.out
  echo "generate cover.html"
}

alias git-delete-squashed='
git checkout -q develop && \
  git for-each-ref refs/heads/ "--format=%(refname:short)" | \
  while read branch; do
    mergeBase=$(git merge-base develop $branch) && \
      [[ $(git cherry develop $(git commit-tree $(git rev-parse $branch^{tree}) -p $mergeBase -m _)) == "-"* ]] && \
      git branch -D $branch;
done'
